#lang racket

(define (next test-divisor)
  (if (= test-divisor 2) 3
      (+ test-divisor 2)))

(define (nexty test-divisor)
  (+ test-divisor 1))

(define (smallest-divisor funct n)
  (define (find-divisor n test-divisor)
    (cond ((> (* test-divisor test-divisor) n) n)
     ((= (remainder n test-divisor) 0) test-divisor)
        (else (find-divisor n (funct test-divisor)))))
  (find-divisor n 2))

(define (prime? funct n)
  (= n (time (smallest-divisor funct n))))

(define (search-for-primes funct start)
  (if (prime? funct start) start
      (search-for-primes funct (+ start 1))))

(search-for-primes next 1E5)
(search-for-primes next 1E6)
(search-for-primes nexty 1E5)
(search-for-primes nexty 1E6)


