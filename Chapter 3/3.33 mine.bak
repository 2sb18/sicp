(define wire-resets '())

(define (reset-wires)
  (define (iter reset-wires-left)
    (if (not (null? reset-wires-left))
        (begin ((car reset-wires-left))
               (iter (cdr reset-wires-left)))))
  (iter wire-resets))
  
(define (make-wire constant-value)
  (let ((connections '()) (changeable-value '()))
    (define (wire-value)
      (if (null? constant-value)
          changeable-value
          constant-value))
    (define (broadcast-change connections-left)
      (if (not (null? connections-left))
          (begin ((car connections-left) (wire-value))
                 (broadcast-change (cdr connections-left)))))
    (define (dispatch op)
      (cond ((eq? op 'set-constant) (lambda (v) 
                                      (set! constant-value v)
                                      (broadcast-change connections)))
            ((eq? op 'set-value) (lambda (v)
                                   (if (not (equal? v (wire-value)))
                                       (begin (set! changeable-value v)
                                              (broadcast-change connections)))))
            ((eq? op 'get-value) (lambda () (wire-value)))
            ((eq? op 'connect) (lambda (proc) (set! connections (cons proc connections))))
            (else (error "no operation by that name" op))))
    (set! wire-resets (cons (lambda () (set! changeable-value '())) wire-resets))
    dispatch))

(define (get-wire-value wire) ((wire 'get-value)))
(define (set-wire-value wire value) ((wire 'set-value) value))
(define (set-wire-constant wire value) ((wire 'set-constant) value))


; m1, m2, and p are wires
(define (multiplier m1 m2 p)
  (define (m1-changed wire-value)
    (cond ((and (null? (get-wire-value m2)) (null? (get-wire-value p))) #f)
          ((null? (get-wire-value p)) (set-wire-value p (* wire-value (get-wire-value m2))))
          ((null? (get-wire-value m2)) (set-wire-value m2 (/ (get-wire-value p) wire-value)))
          (else #f)))
  (define (m2-changed wire-value)
    (cond ((and (null? (get-wire-value m1)) (null? (get-wire-value p))) #f)
          ((null? (get-wire-value p)) (set-wire-value p (* wire-value (get-wire-value m1))))
          ((null? (get-wire-value m1)) (set-wire-value m1 (/ (get-wire-value p) wire-value)))
          (else #f)))
  (define (p-changed wire-value)
    (cond ((and (null? (get-wire-value m1)) (null? (get-wire-value m2))) #f)
          ((null? (get-wire-value m1)) (set-wire-value m1 (/ wire-value (get-wire-value m2))))
          ((null? (get-wire-value m2)) (set-wire-value m2 (/ wire-value (get-wire-value m1))))
          (else #f)))
  ((m1 'connect) m1-changed)
  ((m2 'connect) m2-changed)
  ((p 'connect) p-changed))

(define (adder a1 a2 s)
  (define (a1-changed wire-value)
    (cond ((and (null? (get-wire-value a2)) (null? (get-wire-value s))) #f)
          ((not (null? (get-wire-value a2))) (set-wire-value s (+ wire-value (get-wire-value a2))))
          ((not (null? (get-wire-value s))) (set-wire-value a2 (- (get-wire-value s) wire-value)))
          (else #f)))
  (define (a2-changed wire-value)
    (cond ((and (null? (get-wire-value a1)) (null? (get-wire-value s))) #f)
          ((not (null? (get-wire-value a1))) (set-wire-value s (+ wire-value (get-wire-value a1))))
          ((not (null? (get-wire-value s))) (set-wire-value a1 (- (get-wire-value s) wire-value)))
          (else #f)))
  (define (s-changed wire-value)
    (cond ((and (null? (get-wire-value a1)) (null? (get-wire-value a2))) #f)
          ((not (null? (get-wire-value a1))) (set-wire-value a2 (- (get-wire-value s) wire-value)))
          ((not (null? (get-wire-value a2))) (set-wire-value a2 (- (get-wire-value s) wire-value)))
          (else #f)))
  ((a1 'connect) a1-changed)
  ((a2 'connect) a2-changed)
  ((s 'connect) s-changed))

(define (probe wire name)
  (define (wire-changed new-value)
    (display "New value of ") 
    (display name)
    (display ": ")
    (display new-value)
    (newline))
  ((wire 'connect) wire-changed))

(define (celcius-fahrenheit-converter c f)
  (let ((w (make-wire 9))
        (u (make-wire '()))
        (v (make-wire '()))
        (x (make-wire 5))
        (y (make-wire 32)))
    (multiplier c w u)
    (multiplier v x u)
    (adder v y f)))

(define C (make-wire '()))
(define F (make-wire '()))

(celcius-fahrenheit-converter C F)

(probe C 'C)
(probe F 'F)

(set-wire-value C 25)

; division by zero problem still!


  