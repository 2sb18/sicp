(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (insert-queue! item)
      (let ((item-cons (cons item '())))
        (if (null? front-ptr)
            (begin (set! front-ptr item-cons)
                   (set! rear-ptr item-cons))
            (begin (set-cdr! rear-ptr item-cons)
                   (set! rear-ptr item-cons)))))
    (define (delete-queue!)
      (if (null?  front-ptr)
          (error "delete-queue! called on an empty queue")
          (set! front-ptr (cdr front-ptr))))
    (define (print-queue)
      front-ptr)
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?)
             (null? front-ptr))
            ((eq? m 'front-queue)
             (if (null? front-ptr)
                 (error "front-queue called on an empty queue")
                 (car front-ptr)))
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) (delete-queue!))
            ((eq? m 'print-queue) front-ptr)
            (else (error "dispatch called with incorrect argument" m))))
             
    dispatch))

(define (empty-queue? queue) (queue 'empty-queue?))
(define (front-queue queue) (queue 'front-queue))
(define (insert-queue! queue item) ((queue 'insert-queue!) item))
(define (delete-queue! queue) (queue 'delete-queue!))
(define (print-queue queue) (queue 'print-queue))

(define q1 (make-queue))
(insert-queue! q1 'a)
(print-queue q1)
(insert-queue! q1 'b)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)
(delete-queue! q1)
(print-queue q1)


